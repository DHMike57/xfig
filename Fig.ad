! some sample settings you may want to change

Fig.internalborderwidth:	2
Fig.geometry:			+0+0
Fig.iconX:			+0
Fig.iconY:			-0
! the following should fix the problem that some have had with
! their window manager fighting with xfig over the geometry
Fig*allowShellResize:		False
! pick a nice font for the popup edit window for text objects
Fig*Text_text*font:		-*-times-medium-r-normal--14-*
! filename mask for the file popup browser
Fig*file_panel*mask*string:	*.fig
! filename mask for the export popup browser
Fig*export_panel*mask*string:	*ps
! printer name
! If the following resource is NOT set, xfig will use the PRINTER 
! shell environment variable for the printer name
!Fig*printer*string:		ps

! make the F20 key paste text in the canvas
Fig*translations: #override \n\
			<Key>F20: PasteCanv()\n

! Specify a private Compose key database file.  If this resource contains a "/"
! then the wired-in name of the xfig global directory won't be prefixed to it.
! An initial "~/" is replaced by the value of "$HOME/".
!
!Fig*ComposeKeyDB:	~/.xfig.Compose-key

! let's make these buttons oval in the edit panel
Fig.xfig_edit_panel*done.label:		Done
Fig.xfig_edit_panel*done.ShapeStyle:	oval
Fig.xfig_edit_panel*apply.label:	Apply
Fig.xfig_edit_panel*apply.ShapeStyle:	oval
Fig.xfig_edit_panel*cancel.label:	Cancel
Fig.xfig_edit_panel*cancel.ShapeStyle:	oval

! keyboard accelerators


Fig*quit*accelerators: \
	Meta<Key>q: quit()\n
Fig*delete_all*accelerators: \
	Meta<Key>d: delete_all()\n
Fig*undo*accelerators: \
	Meta<Key>u: undo()\n
Fig*redraw*accelerators: \
	Meta<Key>r: redraw()\n\
	Ctrl<Key>l: redraw()\n
Fig*paste*accelerators: \
	Meta<Key>t: paste()\n
Fig*file*accelerators: \
	Meta<Key>s: SaveFile()\n\
	Meta<Key>l: LoadFile()\n\
	Meta<Key>f: file()\n
Fig*xfig_file_menu*accelerators: \
	Meta<Key>c: cancel()\n\
	Meta<Key>l: load()\n\
	Meta<Key>m: merge()\n\
	Meta<Key>r: rescan()\n\
	Meta<Key>s: save()\n
Fig*export*accelerators: \
	Meta<Key>e: export()\n
Fig*xfig_export_menu*accelerators: \
	Meta<Key>c: cancel()\n\
	Meta<Key>e: export()\n\
	Meta<Key>r: rescan()\n
Fig*print*accelerators: \
	Meta<Key>p: print()\n
Fig*xfig_print_menu*accelerators: \
	Meta<Key>d: dismiss()\n\
	Meta<Key>b: print_batch()\n\
	Meta<Key>x: clear_batch()\n\
	<Key>Return: print()\n\
	Meta<Key>p: print()\n
Fig*xfig_set_unit_panel*accelerators: \
	Meta<Key>c: QuitUnits()\n\
	Meta<Key>s: SetUnits()\n
Fig*mode_panel*accelerators: \
	None<Key>m: ModeMoveObject()\n\
	Ctrl<Key>c: ModeCopyObject()\n\
	None<Key>a: ModeAlign()\n\
	Ctrl<Key>s: ModeScale()\n\
	None<Key>d: ModeDeleteObject()\n\
	Shift<Key>d: ModeDeletePoint()\n\
	Shift<Key>m: ModeMovePoint()\n\
	Ctrl<Key>e: ModeEditObject()\n\
	None<Key>g: ModeCompound()\n\
	Shift<Key>g: ModeBreakCompound()\n\
	Ctrl<Key>r: ModeRotateObjectCW()\n\
	Shift<Key>r: ModeRotateObjectCCW()\n\
	None<Key>f: ModeFlipObjectUD()\n\
	Shift<Key>f: ModeFlipObjectLR()\n\
	Shift<Key>a: ModeArrow()\n\
	Ctrl<Key>A: ModeAddPoint()\n\
	None<Key>l: ModeLine()\n\
	None<Key>t: ModeText()\n\
	None<Key>c: ModeCircleR()\n\
	Shift<Key>c: ModeCircleD()\n\
	None<Key>e: ModeEllipseR()\n\
	Shift<Key>e: ModeEllipseD()\n\
	None<Key>b: ModeBox()\n\
	Shift<Key>b: ModeArcBox()\n\
	None<Key>p: ModePoly()\n\
	Shift<Key>p: ModeRegPoly()\n\
	Ctrl<Key>p: ModeEPS()\n\
	None<Key>r: ModeArc()\n\
	None<Key>s: ModeSpline()\n\
	Shift<Key>s: ModeClSpline()\n\
	None<Key>i: ModeIntSpline()\n\
	Shift<Key>i: ModeClIntSpline()\n\
	None<Key>u: ModeUpdateObject()\n\
	None<Key>v: ModeConvertObject()\n
